const aqiModel = require('../models/aqi_inModel');
const axios = require("axios");

const indianStations = [11311, 11318, 12809, 13734, 13810, 13716, 13700, 13723, 13704, 13697, 9146, 13878, 12817, 13722, 11860, 11899,
    11308, 12440, 13879, 14696, 9147, 14130, 11843, 14700, 11282, 13689, 8185, 11294, 13811, 11321, 12810, 12816, 9069,
    13877, 12463, 12443, 11316, 11862, 11864, 11861, 11866, 12813, 13696, 11306, 11285, 13735, 13701, 14153, 11280, 12827, 12462,
    13813, 12824, 13733, 11288, 11853, 14698, 11842, 12448, 13819, 11302, 13698, 14135, 13809, 12818, 13703, 11322, 11277,
    12446, 11312, 13692, 12821, 14133, 11852, 11290, 12444, 14125, 11850, 11299, 12426, 8729, 12429, -179356,
    12438, 13805, 12431, 14127, 13708, -398299, 12433, 12434, 12819, 14699, 11314, 7067, 12450, 13730, 14148, 13812,
    12437, 9145, 14132, 8186, -399073, 11841, 11313, 13875, 12811, 11275, 11858, 11310, 13694, 12427, 14131, 14137, 12891, 14141,
    14139, 13743, 11286, 11287, 13802, 13816, 3845, 13737, 12439, 13728, 12447, 11272, 1568, 13807, 11962, 13873, 13719,
    8682, 12453, 11855, 14147, 11283, 11851, 13742, 2553, 9068, 13874, 13695, 12445, 11857, 1385, 13748,
    14128, 13718, 11271, 11920, 13729, 12430, 13705, 13801, 11289, 14129, 13693, 12823, 13746, 13724, -254830, 12745, 7069,
    13731, 8683, 11303, 11427, 12744, 14154, 11846, 13717, 9148, 12468, 14138, 12888, 11849, 11845, 12820, 12747, 13803,
    13896, -211000, -209698, 11269, 11850, 11321, 12768, 13694, -398467, -399412, -410383, -398593, -398041, -231775, 8102,
    12436, 12405, 8100, 10092, 12406, 8033, 9557, -220000, 425, 419, 14737, 3316, 14729, 432, 3550, 14762, 14746, 10688, 14730, 14732,
    422, 417, 426, 423, 10109, 428, -230086, 8779, -407626, 4061, 8750, -407623, 12771, 14732, 419, 428, 3316, 422, 10109, 14729, 432, 14730, 417, 14746,
    3283, 12387, 5125, -366619, 5122, 3297, 12490, 3273, 3280, -243415, 3258, -207667, 14898,
    3296, 3291, -400156, 10719, 3234, 10724, 10148, 9082, 13777, -252691, 12415, -206605, -406339, 6441, 12396,
    3298, 14872, 10720, 3270, 13793, 9084, 14876, -254554, 13791, 5113, 14869, -248314, 13768, 13770, 12390,
    3295, 3248, 12385, 13776, 3292, 8010, -405463, 12386, 5116, 6437, 8296, 14899, 13767, 3277,
    -360577, 12539, 13771, 12389, 12394, 12489, 10723, 3243, 13799, 12397, 8298, 3278, 12485, 12491,
    -360580, 12921, 12534, 10145, 10721, 13772, 12919, 13792, 5763, 6433, 12538, 13773, 8518, 3254, 13800, 14881,
    9083, 13784, 5119, 6438, -348907, 3247, 10718, 12393, -93691, -355690, 10147, -243883, 13775, 13786,
    3274, 12395, 5132, 13774, 3238, 14874, 12388, 3281, 3272, 3263, 13769, 5124, 10727, 6444, 6440, 6436,
    14544, 2880, 2911, 2934, 11704, 2872, 14546, 6042, 4401, 2888, 2930, 2850, 14545, 4732, 2728, 9377, 2842, 6627, 14537,
    2726, 2833, 2933, 2910, 6629, 2847, 6048, 14534, 2877, 4733, 6626, 9022, 8725, 2894, 8727, 2837, 6065, 2784, 2783, 8004,
    14533, 9375, 2897, 2906, 4726, -132124, 6047, 2828, 2898, 2813, 2724, 14542, 2922, 14532, 4743, 13347, 4741, 2874, 6066,
    6152, 2919, 2831, 4728, 14549, 6039, 13344, 2917, 2846, 8724, 6043, 6063, 2905, 4745, 4736, 4731, 4746, 2929, 6041, 2815,
    2889, 2884, 4737, 9572, 2859, 2931, 2841, 2785, 6046, 2885, 14535, 8002, 14550, 2814, 6038, 14538, 2816, 6049, 2699, 2892,
    14552, 3720, 2925, 2817, 2821, 2857, 6064, 2883, 2890, 2891, 14541, 6175, -246607, 2896, 9379, 2870, 4738, 2844, 6037,
    2916, 2839, 2867, 2860, 6155, 2900, 2825, 2820, 9378, 2832, 2856, 4729, 2895, 2899, 4411, 2812, 6045, 9376, 5136, 2902,
    2822, 6628, 2853, 4740, 6157, 4727, 8726, 4739, 2879, 4725, -114217, 2855, 2830, 8723, 14555, 2914, 2924, 6067, 14543,
    6044, 12472, 13845, 12470, 13205, -198280, -368260, -418276, 8903, 12840, 10084, 7938, 3019, 6975, 12842, 8615, 3014, -373873, 3001, 4568, 2990, 2992, 3010, 3003, 6264, 3015, 8904,
    3020, -405628, 2994, 4554, 6979, 3013, 6986, 6982, 6976, 2995, 2988, 8907, 6978, 2999, 6256, 12837, 6334, 8613, 5177,
    6993, 3005, 6267, 6995, 3009, 11677, 5765, 6989, 4570, 4576, 6251, 3000, 6123, -400174, 7939, 7935, 8905, 3016, 2997,
    6987, 6985, -110428, -140614, -110548, 6813, 3021, 4577, -420736, 8268, 3007, 2996, -108637, 4724, 4552, 4575, 6991,
    8006, 6973, 3008, 6259, 11678, 6988, 3022, 3012, 6266, 12838, -252826, 6253, 7936, 5767, 6996, 2998, 6252, 8906, 3002,
    12835, 5766, 3017, 6994, 6070, 6980, 2991, 3011, 6804, 3004, 3006, 6974, -378727, -403309, 13844, 12745, 11281, 11844, 12740, 8683, 12458, 12457, 11320, 8781, 14139, 7021,
    -192733, 8163, 8172, 10094, 10559, 10576, 10572, 8086, -217489, 4153, 10575, 8088, 8162, 10564, 10565, 10577, 14562,
    -371356, 10562, 8150, 10571, 10563, 10568, 4142, 4160, 8110, -404938, 10090, 10569, 14531, 11674, 10567, 10573, 10560,
    10574, 8091, 8092, 8084, 10091, 10570, 8087, 10561,
];

console.log("Number of stations are", indianStations.length);

const scheduledTask = async function () {
    try {
        // getting URL from third party
        const apiUrl = 'https://api.waqi.info/feed/@{pathParam}/?token=7124b219cbdffcfa7e30e4e0745bc252b445fb2f';
        for (let i = 0; i < indianStations.length; i++) {
            const pathParamValue = indianStations[i];
            const finalUrl = apiUrl.replace('{pathParam}', pathParamValue);
            // console.log(finalUrl);

            const storeData = await axios.get(finalUrl);
            const dataFromAPI = storeData.data;

            const filter = { SerialNo: dataFromAPI.data.idx };

            // checking if we are getting pm10 from third party api, if not then setting the value of pm10 to null
            let pm10 = null;
            if (dataFromAPI.data.iaqi.hasOwnProperty('pm10')) {
                // console.log("pm10 key hai");
                pm10 = dataFromAPI.data.iaqi.pm10.v;
            }
            // checkingif we are getting pm25 from third party api, if not then setting the value of pm25 to null 
            let pm25 = null;
            if (dataFromAPI.data.iaqi.hasOwnProperty('pm25')) {
                // console.log("pm25 key hai");
                pm25 = dataFromAPI.data.iaqi.pm25.v;
            }
            // checking if we are getting temperature from third party API, if not then setting the value of temprature to null
            let temp = null;
            if (dataFromAPI.data.iaqi.hasOwnProperty('t')) {
                // console.log("temperature key hai");
                temp = dataFromAPI.data.iaqi.t.v;
            }
            // checking if we are getting humidity from third party API, if not thyen setting the value of humidity to null
            let humidity = null;
            if (dataFromAPI.data.iaqi.hasOwnProperty('h')) {
                // console.log("humidity key hai");
                humidity = dataFromAPI.data.iaqi.h.v;
            }


            const update = {
                $set: {
                    AQI_IN: dataFromAPI.data.aqi,
                    PM25: pm25,
                    PM10: pm10,
                    Temp: temp,
                    Humidity: humidity,
                    Time: dataFromAPI.data.time.s
                }
            };
            const result = await aqiModel.findOneAndUpdate(filter, update, { new: true });
            console.log(result);
        }
    }
    catch (error) {
        return res.status(500).send({ status: false, message: error.message });
    }
}

module.exports = { scheduledTask };